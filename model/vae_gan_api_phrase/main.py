import sys
import os
current_dir = os.path.dirname(__file__)
project_dir = os.path.abspath(os.path.join(current_dir, '../..'))
sys.path.append(project_dir)

import random
import numpy as np

import torch
import configparser
from torch.utils.data import Dataset, DataLoader

from model.vae_gan_api_phrase.train import train, test
from data.ali_data.ali_dataset import ALiDataset, collate_fn_vocab
from model.vae_gan_api_phrase.models import Encoder, Decoder, Classifier, Discriminator, API_Phrase
from utils.utils import device, create_folder, save_loss, model_info_save, plt_curve, setup_seed

config = configparser.ConfigParser()
config.read(os.path.join(project_dir,os.path.join("config", "config.ini")))


# 设置embedding随机种子
seed = 42
torch.manual_seed(seed)
torch.cuda.manual_seed(seed)

if __name__ == '__main__':

    setup_seed(int(config['data']['seed']))
    torch_state_seed_value = torch.initial_seed()
    print("Torch Random Seed:", torch_state_seed_value)

    rng_state = np.random.get_state()
    rng_state_seed_value = rng_state[1][0]
    print("NumPy Random Seed:", rng_state_seed_value)

    random_state = random.getstate()
    random_state_seed_value = random_state[1][0]
    print("Python Random Seed:", random_state_seed_value)

    # 数据集构建
    train_dataset = ALiDataset(train=True)
    train_dataloader = DataLoader(train_dataset, batch_size=int(config['vae_gan_api_phrase']['batch_size']), shuffle=True, 
                                  collate_fn=collate_fn_vocab, drop_last=True)

    test_dataset = ALiDataset(train=False)
    test_dataloader = DataLoader(test_dataset, batch_size=int(config['vae_gan_api_phrase']['batch_size']), shuffle=True, 
                                 collate_fn=collate_fn_vocab, drop_last=True)


    # 模型定义
    encoder = Encoder().to(device())
    decoder = Decoder().to(device())
    cla = Classifier().to(device())
    api_phrase = API_Phrase().to(device())

    # 创建保存模型文件夹
    folder_path = create_folder(os.path.join(current_dir, "model_file"))

    # 训练模型
    vae_losses, cla_losses = train(encoder, decoder, api_phrase, cla, train_dataloader, test_dataloader, folder_path)

    # 保存本次训练的loss到文件
    save_loss(folder_path, vae_losses, "vae_losses")
    save_loss(folder_path, cla_losses, "cla_losses")

    # # 测试结果
    recall, f1, accuracy = test(encoder, cla, test_dataloader)

    # 保存测试结果
    model_info_save(folder_path=folder_path,  recall=recall, f1=f1, accuracy=accuracy, configfile=config)

    # 画图
    # plt_curve(vae_losses, int(config['vae_gan_api_phrase']['epochall']))
    # plt_curve(cla_losses, int(config['vae_gan_api_phrase']['epochall']))

