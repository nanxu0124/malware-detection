import sys
import os

current_dir = os.path.dirname(__file__)
project_dir = os.path.abspath(os.path.join(current_dir, '../..'))
sys.path.append(project_dir)


import random
import numpy as np
import torch
import torch.nn as nn
import configparser
import torch.nn.functional as F
from utils.utils import device, model_save, model_save_v2
from torch.optim import Adam
from tqdm import tqdm
from torch.utils.data import Dataset, DataLoader
from sklearn.metrics import recall_score, f1_score, accuracy_score, precision_score
from data.ali_data.ali_dataset import ALiDataset, collate_fn_vocab
from utils.utils import device, create_folder, save_loss, model_info_save, plt_curve, setup_seed

from data.ali_data.ali_dataset import vocab_pkl

# 创建一个配置解析器对象
config = configparser.ConfigParser()
# 读取INI文件
config.read(os.path.join(project_dir, os.path.join("config", "config.ini")))


vocab_size = len(vocab_pkl)
dim = int(config['data']['embedding_dim'])
max_len = int(config['data']['sequence_max_len'])

class TextCNN(nn.Module):
    def __init__(self):
        super(TextCNN, self).__init__()

        self.cnn1_1 = nn.Conv2d(in_channels=1, out_channels=128, kernel_size=(3, 8), stride=1, padding=(1, 0))
        self.cnn1_2 = nn.Conv2d(in_channels=1, out_channels=128, kernel_size=(4, 8), stride=1)
        self.cnn1_3 = nn.Conv2d(in_channels=1, out_channels=128, kernel_size=(5, 8), stride=1, padding=(2, 0))


        self.lin1 = nn.Linear(1920000, 256)
        self.lin2 = nn.Linear(256, 6)


    def forward(self, x):

        pad = nn.ZeroPad2d(padding=(0, 0, 2, 1))
        x_pad = pad(x)

        x_name_cnn1 = F.relu(self.cnn1_1(x)).squeeze(-1).permute(0, 2, 1)
        x_name_cnn2 = F.relu(self.cnn1_2(x_pad)).squeeze(-1).permute(0, 2, 1)
        x_name_cnn3 = F.relu(self.cnn1_3(x)).squeeze(-1).permute(0, 2, 1)

        x = torch.cat([x_name_cnn1, x_name_cnn2, x_name_cnn3], dim=-1)
        x = x.view(x.shape[0],-1)

        x = F.relu(self.lin1(x))
        x = F.dropout(x, p=0.1, training=self.training)
        self.lin2(x)

        return x
    
def TrainTextCNN(train_loader, test_loader, folder_path):
    print("TextCNN Train begin")

    model = TextCNN().to(device())
    TextCNNLoss = []
    epochs = 64
    lr = 0.005
    optimizer = Adam(model.parameters(), lr)

    for epoch in range(epochs):

        running_loss = 0.0
        true_labels = []
        predicted_labels = []

        if epoch % 1 == 0 and epoch != 0:
            test(model, test_loader)

        model.train()
        
        for file_id, api, api_counts, remove_dup, labels in tqdm(train_loader, desc=f'Epoch {epoch + 1}/{epochs}', ncols=100):

            inputs = remove_dup.to(device())
            labels = labels.to(device())

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = F.cross_entropy(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            true_labels.extend(labels.tolist())
            _, predicted = torch.max(outputs, 1)
            predicted_labels.extend(predicted.tolist())

        avg_loss = running_loss / len(train_loader)

        TextCNNLoss.append(avg_loss)

        recall = recall_score(true_labels, predicted_labels, average='weighted')
        f1 = f1_score(true_labels, predicted_labels, average='weighted')
        accuracy = accuracy_score(true_labels, predicted_labels)

        print(f'Epoch [{epoch + 1}/{epochs}] - Loss: {avg_loss:.4f} - Recall: {recall:.4f} - F1-Score: {f1:.4f} - Accuracy: {accuracy:.4f}')

    model_save(folder_path, (model,))
    save_loss(folder_path, TextCNNLoss, "TextCNNLoss")

    recall, f1, accuracy, precision = test(model, test_loader)
    model_info_save(folder_path, recall, f1, accuracy, precision)

    print('TextCNN Train finished')


def test(model, test_loader):
    model.eval()

    true_labels = []
    predicted_labels = []

    with torch.no_grad():  # 不需要计算梯度
        for file_id, api, api_counts, remove_dup, labels in test_loader:

            # 设置device
            inputs = remove_dup.to(device())
            labels = labels.to(device())

            # 获取模型输出结果
            outputs = model(inputs)

            _, predicted = torch.max(outputs, 1)
            
            # 保存真实标签和预测标签以计算指标
            true_labels.extend(labels.tolist())
            predicted_labels.extend(predicted.tolist())

    # 计算召回率、F1-Score 和准确度
    recall = recall_score(true_labels, predicted_labels, average='weighted')
    f1 = f1_score(true_labels, predicted_labels, average='weighted')
    accuracy = accuracy_score(true_labels, predicted_labels)
    precision = precision_score(true_labels, predicted_labels, average='weighted')

    # 输出测试指标
    print(f'Test Accuracy: {accuracy:.4f}')
    print(f'Test Recall: {recall:.4f}')
    print(f'Test F1-Score: {f1:.4f}')
    print(f'Test precision: {precision:.4f}')

    return recall, f1, accuracy, precision

def SetSeed():
    # 设置随机种子
    setup_seed(42)
    torch_state_seed_value = torch.initial_seed()
    print("Torch Random Seed:", torch_state_seed_value)

    rng_state = np.random.get_state()
    rng_state_seed_value = rng_state[1][0]
    print("NumPy Random Seed:", rng_state_seed_value)

    random_state = random.getstate()
    random_state_seed_value = random_state[1][0]
    print("Python Random Seed:", random_state_seed_value)

def BuildDataloader():
    # 构建 train_dataloader
    train_dataset = ALiDataset(train=True)
    train_dataloader = DataLoader(train_dataset, batch_size=128, 
                                  shuffle=True, collate_fn=collate_fn_vocab, drop_last=True)

    # 构建 test_dataloader
    test_dataset = ALiDataset(train=False)
    test_dataloader = DataLoader(test_dataset, batch_size=128, 
                                 shuffle=True, collate_fn=collate_fn_vocab, drop_last=True)
    return train_dataloader, test_dataloader


if __name__ == '__main__':

    SetSeed()
    
    train_dataloader, test_dataloader = BuildDataloader()

    # 创建保存模型文件夹
    folder_path = create_folder(os.path.join(current_dir, "model_file"))

    # 训练
    TrainTextCNN(train_dataloader,test_dataloader, folder_path)

    # net = TextCNN().to(device())
    # net.load_state_dict(torch.load(os.path.join(current_dir, 
    #                             os.path.join("model_file", 
    #                             os.path.join("2023-12-27_08-43-28", "TextCNN_model_state_dict.pkl")))))
    # recall, f1, accuracy = test(net, test_dataloader)
