import sys
import os

current_dir = os.path.dirname(__file__)
project_dir = os.path.abspath(os.path.join(current_dir, '../..'))
sys.path.append(project_dir)

from data.ali_data.ali_dataset import MLData, ALiDataset
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, recall_score, f1_score, accuracy_score, precision_score


train_data, train_labels, test_data, test_labels = MLData()

# 使用词袋模型将文本转换为特征向量
vectorizer = CountVectorizer(tokenizer=lambda x: x.split(), lowercase=True, token_pattern=None)
X_train = vectorizer.fit_transform(train_data)
X_test = vectorizer.transform(test_data)


def SVMTrain():
    print("SVM Train")
    # 创建并训练SVM模型
    svm_classifier = SVC(kernel='linear', C=1.0, verbose=0, random_state=42)
    svm_classifier.fit(X_train, train_labels)

    # 在测试集上进行预测
    predictions = svm_classifier.predict(X_test)
    accuracy = accuracy_score(test_labels, predictions)
    recall = recall_score(test_labels, predictions)
    percision = precision_score(test_labels, predictions)
    f1 = f1_score(test_labels, predictions)
    # 输出分类报告
    print(classification_report(test_labels, predictions))
    print(f'SVM Accuracy:{accuracy}')
    print(f'SVM recall:{recall}')
    print(f'SVM percision:{percision}')
    print(f'SVM f1_score:{f1}')
    print("SVM Train End")

def KNNTrain():
    print("KNN Train")
    knn_model = KNeighborsClassifier(n_neighbors=3)
    knn_model.fit(X_train, train_labels)

    # 在测试集上进行预测
    predictions = knn_model.predict(X_test)

    # 输出准确率
    accuracy = accuracy_score(test_labels, predictions)
    recall = recall_score(test_labels, predictions)
    percision = precision_score(test_labels, predictions)
    f1 = f1_score(test_labels, predictions)
    print(f'KNN Accuracy:{accuracy}')
    print(f'KNN recall:{recall}')
    print(f'KNN percision:{percision}')
    print(f'KNN f1_score:{f1}')
    print("KNN Train End")

def DTTrain():
    print("DT Train")
    dt_model = DecisionTreeClassifier(random_state=42)
    dt_model.fit(X_train, train_labels)

    # 在测试集上进行预测
    predictions = dt_model.predict(X_test)

    # 输出准确率
    accuracy = accuracy_score(test_labels, predictions)
    recall = recall_score(test_labels, predictions)
    percision = precision_score(test_labels, predictions)
    f1 = f1_score(test_labels, predictions)
    print(f'DT Accuracy:{accuracy}')
    print(f'DT recall:{recall}')
    print(f'DT percision:{percision}')
    print(f'DT f1_score:{f1}')
    print("DT Train End")

# SVMTrain()
# KNNTrain()
DTTrain()

# 6分类
# SVM Accuracy:0.7566666666666667
# SVM recall:0.761735546120375
# SVM percision:0.7619946350658703
# SVM f1_score:0.7542762804921262
# SVM Train End
# KNN Train
# KNN Accuracy:0.7133333333333334
# KNN recall:0.7107445490747989
# KNN percision:0.7086401507603338
# KNN f1_score:0.7086844445301667
# KNN Train End
# DT Train
# DT Accuracy:0.75
# DT recall:0.7518895135083848
# DT percision:0.7546093967901748
# DT f1_score:0.7504672425210183
# DT Train End

# 2分类
# SVM Accuracy:0.8907407407407407
# SVM recall:0.8730853391684902
# SVM percision:0.9081942336874052
# SVM f1_score:0.8902937895128301
# SVM Train End
# KNN Train
# KNN Accuracy:0.912962962962963
# KNN recall:0.9358132749817651
# KNN percision:0.8972027972027972
# KNN f1_score:0.9161013923598714
# KNN Train End
# DT Train
# DT Accuracy:0.9440740740740741
# DT recall:0.9525893508388038
# DT percision:0.9382183908045977
# DT f1_score:0.9453492580528411
# DT Train End