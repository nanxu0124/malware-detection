import sys
import os

current_dir = os.path.dirname(__file__)
project_dir = os.path.abspath(os.path.join(current_dir, '../..'))
sys.path.append(project_dir)

import torch.nn as nn
import configparser

from data.ali_data import ali_dataset

# 创建一个配置解析器对象
config = configparser.ConfigParser()
# 读取INI文件
config.read('./config/config.ini')


vocab_size = len(ali_dataset.vocab_pkl)
dim = int(config['data']['embedding_dim'])
n_class = 8
max_len = int(config['data']['sequence_max_len'])


class textCNN(nn.Module):
    def __init__(self):
        super(textCNN, self).__init__()

        # 将实现训练好的词向量导入
        self.embeding = nn.Embedding(vocab_size, dim, padding_idx=ali_dataset.vocab_pkl.PAD)
        self.conv1 = nn.Sequential(
            nn.Conv2d(in_channels=1, out_channels=16, kernel_size=5, stride=1, padding=2),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)   # (16, 64, 64)
        )
        self.conv2 = nn.Sequential(
            nn.Conv2d(in_channels=16, out_channels=32, kernel_size=5, stride=1, padding=2),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)   # (32, 30, 30)
        )
        self.conv3 = nn.Sequential(
            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=5, stride=1, padding=2),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)   # (64, 13, 13)
        )
        self.conv4 = nn.Sequential(
            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=5, stride=1, padding=2),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)   # (128, 9, 9)
        )

        self.out = nn.Linear(131072, n_class)

    def forward(self, x):
        x = self.embeding(x)
        x = x.view(x.size(0), 1, max_len, dim)
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.conv3(x)
        x = self.conv4(x)
        x = x.view(x.size(0), -1)   # 将(batch，outchanel,w,h)展平(batch，outchanel*w*h)
        output = self.out(x)
        return output
