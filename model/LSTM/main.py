import sys
import os
current_dir = os.path.dirname(__file__)
project_dir = os.path.abspath(os.path.join(current_dir, '../..'))
sys.path.append(project_dir)

import re
import torch
import pickle

import random
import numpy as np

import configparser
import pandas as pd
import torch.nn as nn

from models import *
from train import *
from utils import utils
from data.ali_data import ali_dataset

from torch.optim import Adam
from torch.utils.data import Dataset, DataLoader


# 创建一个配置解析器对象
config = configparser.ConfigParser()
# 读取INI文件
config.read('./config/config.ini')

# 设置embedding随机种子
# seed = 42
# torch.manual_seed(seed)
# torch.cuda.manual_seed(seed)
# random.seed(seed)
# np.random.seed(seed)

if __name__ == '__main__':

    # 构建 train_dataloader
    train_dataset = ali_dataset.ALiDataset(train=True)
    train_dataloader = DataLoader(train_dataset, batch_size=int(config['LSTM']['batch_size']), shuffle=False, collate_fn=ali_dataset.collate_fn_vocab)

    # 构建 test_dataloader
    test_dataset = ali_dataset.ALiDataset(train=False)
    test_dataloader = DataLoader(test_dataset, batch_size=int(config['LSTM']['batch_size']), shuffle=False, collate_fn=ali_dataset.collate_fn_vocab)

    # 定义模型
    lstmModel = LSTM().to(utils.device())

    # 参数设置
    lstmModel_optimizer = Adam(lstmModel.parameters(), lr=float(config['LSTM']['learning_rate']))

    # 设置loss
    criterion_lstmModel = nn.CrossEntropyLoss()

    # 创建保存模型文件夹
    folder_path = utils.create_folder('./model/LSTM/model_file')

    # 训练lstmModel
    lstmModel_losses = train_LSTMModel(lstmModel, train_dataloader, criterion_lstmModel, lstmModel_optimizer, int(config['LSTM']['epoch']), folder_path)

    # 加载模型
    # model.load_state_dict(torch.load(''))

    # # 测试结果
    recall, f1, accuracy = test(lstmModel, test_dataloader)

    # 保存测试结果
    utils.model_info_save(folder_path=folder_path,  recall=recall, f1=f1, accuracy=accuracy, configfile=config)

    # 画图
    utils.plt_curve(lstmModel_losses, int(config['LSTM']['epoch']))
